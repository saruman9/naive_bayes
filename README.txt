                  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                   НАИВНЫЙ БАЙЕСОВСКИЙ КЛАССИФИКАТОР

                               Alex Sarum
                  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


Содержание
──────────

1 Описание функционала
.. 1.1 Модуль `gaussian.rs'


      Наивный байесовский классификатор — простой вероятностный
      классификатор, основанный на применении Теоремы Байеса со
      строгими (наивными) предположениями о независимости.
      – [Wikipedia]

В данной работе реализован наивный байесовский классификатор на базе
Гауссовой функции для данных с нормальным распределением. Модель данного
типа используется в случае непрерывных признаков и предполагает, что
значения признаков имеют нормальное распределение.

\begin{equation}
p(C_k|x) = p(C_k) \frac{p(x|C_k)}{p_x}
\end{equation}


[Wikipedia]
https://ru.wikipedia.org/wiki/%25D0%259D%25D0%25B0%25D0%25B8%25D0%25B2%25D0%25BD%25D1%258B%25D0%25B9_%25D0%25B1%25D0%25B0%25D0%25B9%25D0%25B5%25D1%2581%25D0%25BE%25D0%25B2%25D1%2581%25D0%25BA%25D0%25B8%25D0%25B9_%25D0%25BA%25D0%25BB%25D0%25B0%25D1%2581%25D1%2581%25D0%25B8%25D1%2584%25D0%25B8%25D0%25BA%25D0%25B0%25D1%2582%25D0%25BE%25D1%2580


1 Описание функционала
══════════════════════

  Программа состоит из двух модулей: главного ([`main.rs']) и модуля для
  расчёта Гауссовой функции и Posterior Probability — $P(C_{k} | x)$
  ([`gaussian.rs']).


[`main.rs'] file:./src/main.rs

[`gaussian.rs'] file:./src/gaussian.rs

1.1 Модуль `gaussian.rs'
────────────────────────

  Представляет из себя структуру данных `Gaussian', которая содержит в
  себе информацию о математическом ожидании (`expected') и дисперсии
  (`variance'), характерных для определённого класса данных с заданной
  характеристикой (листинг 1). Каждая из полей структуры представляет из
  себя матрицу (таблица 1).

  ┌────
  │ pub struct Gaussian {
  │     /// `mu` - expected value.
  │     expected: Matrix<f64>,
  │     /// `sigma ^ 2` - variance.
  │     variance: Matrix<f64>,
  │ }
  └────
  Распечатка 1.: Структура `Gaussian'

  ━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
               │ $feature_{1}$  $feature_{2}$  $feature_{3}$  …  $feature_{n}$ 
  ─────────────┼───────────────────────────────────────────────────────────────
   $Class_{1}$ │ exp, var       exp, var       exp, var       …  exp, var      
   $Class_{2}$ │ exp, var       exp, var       exp, var       …  exp, var      
   …           │ …              …              …              …  …             
   $Class_{k}$ │ exp, var       exp, var       exp, var       …  exp, var      
  ━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  Таблица 1.: Внутреннее представление структуры `Gaussian'

  Статический метод `from_model' (листинг 2) на вход принимает
  количество анализируемых классов и количество характеристик,
  возвращает новый объект структуры `Gaussian'.

  ┌────
  │ /// Create empty parameters and likehoods for data.
  │ pub fn from_model(class_count: usize, features_count: usize) -> Self {
  └────
  Распечатка 2.: Статический метод `from_model'

  Метод `compute_gaussian' (листинг 3) на вход принимает матрицу данных
  для обучения и идентификационный номер класса, для которого требуется
  вычислить математическое ожидание и дисперсию всех характеристик. Как
  уже было сказано, данный метод вычисляет необходимые параметры
  Гауссовой функции для каждой из характеристик класса и записывает в
  поля ассоциированной структуры (матрицы `expected' и `variance').

  ┌────
  │ /// Compute parameters (expected value, variance) for the Class of data.
  │ pub fn compute_gaussian(&mut self, data: &Matrix<f64>, class_num: usize) {
  └────
  Распечатка 3.: Метод `compute_gaussian'

  Метод `compute_likehood_and_predict' (листинг 4) на вход принимает
  матрицу объектов (матрица характеристик), которые необходимо
  классифицировать, а также массив Class Prior Probability — $P(C_{k})$.
  Возвращает матрицу, которая содержит вероятности соотнесения объектов
  к тому или иному классу.

  ┌────
  │ /// Compute likehood and Posterior Probability for each class of data.
  │ pub fn compute_likehood_and_predict(&self,
  │                                     targets: &Matrix<f64>,
  │                                     class_prior: &[f64])
  │                                     -> Matrix<f64> {
  └────
  Распечатка 4.: Метод `compute_likehood_and_predict'
