#+TITLE: Наивный байесовский классификатор
#+AUTHOR: Alex Sarum
#+LANGUAGE: ru
#+OPTIONS: toc:nil title:nil

#+LATEX_CMD: xelatex
# Set geometry of page
#+LATEX_CLASS: gost
# Set cyrillic fonts
#+LATEX_HEADER_EXTRA: \setmainlanguage[babelshorthands=true]{russian}
#+LATEX_HEADER_EXTRA: \setotherlanguage{english}
#+LATEX_HEADER_EXTRA: \defaultfontfeatures{Ligatures=TeX,Mapping=tex-text}
#+LATEX_HEADER_EXTRA: \setmainfont{Times New Roman}
#+LATEX_HEADER_EXTRA: \newfontfamily\cyrillicfont{Times New Roman}
#+LATEX_HEADER_EXTRA: \setsansfont{Arial}
#+LATEX_HEADER_EXTRA: \newfontfamily\cyrillicfontsf{Arial}
#+LATEX_HEADER_EXTRA: \setmonofont{DejaVu Sans Mono}
#+LATEX_HEADER_EXTRA: \newfontfamily\cyrillicfonttt[Scale=0.8]{DejaVu Sans Mono}
#+LATEX_HEADER: \usepackage[justification=centering]{caption}

#+LATEX: \include{title}
#+LATEX: \tableofcontents

#+BEGIN_abstract
Наивный байесовский классификатор — простой вероятностный классификатор,
основанный на применении Теоремы Байеса со строгими (наивными) предположениями о
независимости (формула [[eq:bayes]]).
--- [[https://ru.wikipedia.org/wiki/%25D0%259D%25D0%25B0%25D0%25B8%25D0%25B2%25D0%25BD%25D1%258B%25D0%25B9_%25D0%25B1%25D0%25B0%25D0%25B9%25D0%25B5%25D1%2581%25D0%25BE%25D0%25B2%25D1%2581%25D0%25BA%25D0%25B8%25D0%25B9_%25D0%25BA%25D0%25BB%25D0%25B0%25D1%2581%25D1%2581%25D0%25B8%25D1%2584%25D0%25B8%25D0%25BA%25D0%25B0%25D1%2582%25D0%25BE%25D1%2580][Wikipedia]]

#+NAME: eq:bayes
\begin{equation}
p(C_k | x) = \frac{p(C_k) p(x | C_k)}{p(x)},
\end{equation}

где $p(C_k | x)$ --- Posterior Probability, $p(C_k)$ --- Class Prior
Probability, $p(x | C_k)$ --- Likehood, $p(x)$ --- Predictor Prior Probability.

В данной работе реализован наивный байесовский классификатор на базе Гауссовой
функции для данных с нормальным распределением. Модель данного типа используется
в случае непрерывных признаков и предполагает, что значения признаков имеют
нормальное распределение.
#+END_abstract

#+LATEX: \newpage

* Задание

Имеются объекты двух классов, характеризующиеся двумя атрибутами ~x~ и ~y~,
каждый атрибут представляет собой непрерывную случайную величину, распределённую
по нормальному закону. Приведена обучающая выборка двух классов и атрибуты
распознаваемого объекта.

Задача: построить классификатор и отнести распознаваемый объект к определённому
классу.

#+LATEX: \begin{listing}[H]
#+ATTR_LATEX: :float t
#+CAPTION: Входные данные
#+BEGIN_SRC text
X_1 = [8.692, 8.349, 10.644, 9.680, 8.203, 7.681, 6.453, 7.039, 8.568, 9.551]
Y_1 = [11.023, 4.634, 5.380, 7.341, 5.507, 5.459, 5.671, 5.663, 9.348, 7.882]
X_2 = [6.845, 6.564, 7.459, 4.832, 5.148, 7.292, 8.928, 7.738, 5.434, 8.559]
Y_2 = [5.609, 7.641, 6.360, 8.555, 6.509, 5.393, 8.124, 9.005, 8.383, 6.835]
#+END_SRC
#+LATEX: \end{listing}

#+LATEX: \begin{listing}[H]
#+ATTR_LATEX: :float t
#+CAPTION: Распознаваемый объект
#+BEGIN_SRC text
X = 8
Y = 8
#+END_SRC
#+LATEX: \end{listing}


* Описание функционала

Программа состоит из двух модулей: главного ([[file:./src/main.rs][=main.rs=]])
и модуля для расчёта Гауссовой функции и Posterior Probability --- $P(C_{k} |
x)$ ([[file:./src/gaussian.rs][=gaussian.rs=]]).

** Модуль =main.rs=

Данный модуль отвечает за ввод исходных данных (считывание информации о данных
для обучения, о классах, об анализируемых данных) и непосредственно за
классификацию целевых объектов.

*** Формат ввода

После запуска программа попросит ввести количество элементов для обучения и
количество атрибутов, по которым будет проводится классификация (листинг
[[lst:input_count_train_data]]). Производится ввод двух целых чисел через
пробел, по окончанию ввод следует нажать ~<Enter>~.

#+LATEX: \begin{listing}[H]
#+ATTR_LATEX: :float t
#+CAPTION: Ввод информации о данных для обучения
#+NAME: lst:input_count_train_data
#+BEGIN_SRC text
Input count of train elements and count of features (e.g. 20 2):
$ 5 2
#+END_SRC
#+LATEX: \end{listing}

Затем требуется ввести данные для обучения в количестве указанном раннее
(листинг [[lst:input_train_data]]).

#+LATEX: \begin{listing}[H]
#+ATTR_LATEX: :float t
#+CAPTION: Ввод данных для обучения
#+NAME: lst:input_train_data
#+BEGIN_SRC text
Count of elements: 5; count of features: 2.
Input train data (e.g.
1.332 234.2
2.34 3
4 5):
$ 8.692 11.023
$ 8.349 4.634
$ 10.644 5.380
$ 9.680 7.341
$ 6.845 5.609
Train data:
⎡ 8.692 11.023⎤
⎢ 8.349  4.634⎥
⎢10.644   5.38⎥
⎢  9.68  7.341⎥
⎣ 6.845  5.609⎦
#+END_SRC
#+LATEX: \end{listing}

Также требуется ввести информацию о принадлежности данных к тому или иному
классу (листинги [[lst:input_count_class]], [[lst:input_class]]). Нежелательно,
чтобы одному из классов соответствовало менее двух объектов, также недопустимо,
чтобы один объект соответствовал нескольким классам. Ввод классов происходит в
том же порядке, в каком были введены данные об объектах для обучения.

#+LATEX: \begin{listing}[H]
#+ATTR_LATEX: :float t
#+CAPTION: Ввод информации о количестве классов
#+NAME: lst:input_count_class
#+BEGIN_SRC text
Input count of classes:
$ 2
#+END_SRC
#+LATEX: \end{listing}

#+LATEX: \begin{listing}[H]
#+ATTR_LATEX: :float t
#+CAPTION: Ввод информации о распределении данных для обучения по классам
#+NAME: lst:input_class
#+BEGIN_SRC text
Input classes data (e.g.
1 0 0
0 0 1
0 1 0):
$ 1 0
$ 1 0
$ 1 0
$ 0 1
$ 0 1
Class data:
⎡1 0⎤
⎢1 0⎥
⎢1 0⎥
⎢0 1⎥
⎣0 1⎦
#+END_SRC
#+LATEX: \end{listing}

В конце вводится информация для объектов, которые необходимо классифицировать
(листинги [[lst:input_count_targets]], [[lst:input_target_data]]).

#+LATEX: \begin{listing}[H]
#+ATTR_LATEX: :float t
#+CAPTION: Ввод информации о количестве объектов для классификации
#+NAME: lst:input_count_targets
#+BEGIN_SRC text
Input count of targets for predict:
$ 3
#+END_SRC
#+LATEX: \end{listing}

#+LATEX: \begin{listing}[H]
#+ATTR_LATEX: :float t
#+CAPTION: Ввод информации об объектах для классификации
#+NAME: lst:input_target_data
#+BEGIN_SRC text
Count of elements: 1; count of features: 2
Input target data (e.g.
1.332 234.2 3.4
2.34 3 5.6
4 5 0.0):
$ 1.332 12.3
$ 12 32
$ 1 1
Targets data:
⎡1.332  12.3⎤
⎢   12    32⎥
⎣    1     1⎦
#+END_SRC
#+LATEX: \end{listing}

В конечном итоге мы получаем информацию о классификации целевых объектов
(листинг [[lst:output_summary]]).

#+LATEX: \begin{listing}[H]
#+ATTR_LATEX: :float t
#+CAPTION: Информация о классах для целевых объектов
#+NAME: lst:output_summary
#+BEGIN_SRC text
Class of target #0 is 1
Class of target #1 is 1
Class of target #2 is 2
#+END_SRC
#+LATEX: \end{listing}


*** Тесты

Данный модуль также включает в себя функции самотестирования для выявления
ошибок при изменении функционала. Данные тесты запускаются каждый раз, когда
происходит слияние рабочих копий в общую основную ветвь разработки при
непрерывной интеграции (Continuous Integration) (листинг [[lst:testing]]).

#+LATEX: \begin{listing}[H]
#+ATTR_LATEX: :float t
#+CAPTION: Процесс самотестирования успешно пройден
#+NAME: lst:testing
#+BEGIN_SRC text
$ cargo test
   Compiling naive_bayes v0.1.0 (file:///home/.../naive_bayes)
    Finished debug [unoptimized + debuginfo] target(s) in 1.94 secs
     Running target/debug/naive_bayes-2d0129c823898c12

running 1 test
test tests::test_gaussian ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured
#+END_SRC
#+LATEX: \end{listing}


** Модуль =gaussian.rs=

Представляет из себя структуру данных =Gaussian=, которая содержит в себе
информацию о математическом ожидании (=expected=) и дисперсии (=variance=),
характерных для определённого класса данных с заданной характеристикой (листинг
[[lst:struct_gaussian]]). Каждая из полей структуры представляет из себя матрицу
(таблица [[tbl:struct_gaussian]]).

#+LATEX: \begin{listing}[H]
#+ATTR_LATEX: :float t
#+CAPTION: Структура =Gaussian=
#+NAME: lst:struct_gaussian
#+INCLUDE: "./src/gaussian.rs" :lines "28-34" src rust
#+LATEX: \end{listing}

#+CAPTION: Внутреннее представление структуры =Gaussian=
#+NAME: tbl:struct_gaussian
    |             | $feature_{1}$ | $feature_{2}$ | $feature_{3}$ | ... | $feature_{n}$ |
    |-------------+---------------+---------------+---------------+-----+---------------|
    | /           | <             |               |               |     |               |
    | $Class_{1}$ | exp, var      | exp, var      | exp, var      | ... | exp, var      |
    | $Class_{2}$ | exp, var      | exp, var      | exp, var      | ... | exp, var      |
    | ...         | ...           | ...           | ...           | ... | ...           |
    | $Class_{k}$ | exp, var      | exp, var      | exp, var      | ... | exp, var      |

Статический метод =from_model= (листинг [[lst:fn_from_model]]) на вход принимает
количество анализируемых классов и количество атрибутов, возвращает новый объект
структуры =Gaussian=.

#+LATEX: \begin{listing}[H]
#+ATTR_LATEX: :float t
#+CAPTION: Статический метод =from_model=
#+NAME: lst:fn_from_model
#+INCLUDE: "./src/gaussian.rs" :lines "46-48" src rust
#+LATEX: \end{listing}

Метод =compute_gaussian= (листинг [[lst:fn_compute_gaussian]]) на вход принимает
матрицу данных для обучения и идентификационный номер класса, для которого
требуется вычислить математическое ожидание и дисперсию всех характеристик. Как
уже было сказано, данный метод вычисляет необходимые параметры Гауссовой функции
для каждого из атрибутов класса и записывает в поля ассоциированной структуры
(матрицы =expected= и =variance=).

#+LATEX: \begin{listing}[H]
#+ATTR_LATEX: :float t
#+CAPTION: Метод =compute_gaussian=
#+NAME: lst:fn_compute_gaussian
#+INCLUDE: "./src/gaussian.rs" :lines "54-56" src rust
#+LATEX: \end{listing}

Метод =compute_likehood_and_predict= (листинг
[[lst:fn_compute_likehood_and_predict]]) на вход принимает матрицу объектов
(матрица атрибутов), которые необходимо классифицировать, а также массив Class
Prior Probability --- $P(C_{k})$. Возвращает матрицу, которая содержит
вероятности соотнесения объектов к тому или иному классу.

#+LATEX: \begin{listing}[H]
#+ATTR_LATEX: :float t
#+CAPTION: Метод =compute_likehood_and_predict=
#+NAME: lst:fn_compute_likehood_and_predict
#+INCLUDE: "./src/gaussian.rs" :lines "71-77" src rust
#+LATEX: \end{listing}

Нормальное распределение, также называемое распределением Гаусса или
Гаусса--Лапласа —-- распределение вероятностей, которое в одномерном случае
задаётся функцией плотности вероятности, совпадающей с функцией Гаусса (формула
[[eq:gaussian]]).

#+NAME: eq:gaussian
\begin{equation}
p(x = \upsilon|c) = \frac{1}{\sqrt{2 \pi \sigma_{c}^{2}}} e^{-\frac{(\upsilon - \mu_{c})^{2}}{2 \sigma_{c}^{2}}},
\end{equation}

где параметр $\upsilon$ --— математическое ожидание (среднее значение), медиана
и мода распределения, а параметр $\sigma$ --— среднеквадратическое отклонение
($\sigma^2$ — дисперсия) распределения.


* Классификация объекта

Для классифицирования заданного объекта приведём данные к требуемому виду
(листинг [[lst:format_input_data]]) и запишем в файл (~variant.inp~).

#+LATEX: \begin{listing}[H]
#+ATTR_LATEX: :float t
#+CAPTION: Форматированные данные
#+NAME: lst:format_input_data
#+BEGIN_SRC text
20 2
8.692 11.023
8.349 4.634
...
7.738 9.005
5.434 8.383
8.559 6.835
2
1 0
1 0
...
0 1
0 1
1
8 8
#+END_SRC
#+LATEX: \end{listing}

Для классификации передадим содержимое файла с данными программе через пайп
(листинг [[lst:result]]).

#+LATEX: \begin{listing}[H]
#+ATTR_LATEX: :float t
#+NAME: lst:result
#+CAPTION: Вывод программы и классификация
#+BEGIN_SRC text
$ cat variant.inp | cargo run --release
    Finished release [optimized] target(s) in 0.0 secs
     Running `target/release/naive_bayes`
...
Targets data:
[8 8]
Class of target #0 is 2
#+END_SRC
#+LATEX: \end{listing}


* Результаты

В ходе выполнения работы был реализован наивный байесовский классификатор на
базе Гауссовой функции для данных с нормальным распределение. Также было
выполнено задание по классификации объекта с атрибутами ~X = 8; Y = 8~: объект
был отнесён ко второму классу.
